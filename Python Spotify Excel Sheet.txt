import csv
from tabulate import tabulate

# Requirement step 1 - access the data in this file and print out only the headers
# Open spotify-2023 as csv_file
with open('spotify-2023.csv', 'r') as csv_file:
    # Use readline() Method to read first line as defined in text example
    line1 = csv_file.readline()
    # print headers from line1
    print("Headers:", line1)
# End Requirement step 1


# Requirement step 2 - parse the first 5 rows of data - output only the data no headers
# Read first 5 rows using readline() method
    line2 = csv_file.readline()
    line3 = csv_file.readline()
    line4 = csv_file.readline()
    line5 = csv_file.readline()
    line6 = csv_file.readline()
# print lines created from readline() method
    print(f"First 5 rows of data:")
    print(line2)
    print(line3)
    print(line4)
    print(line5)
    print(line6)
# End Requirement step 2


# Requirement step 3 - grab the column artist(s)_name and output the frequency of Taylor Swift occurrences
with open('spotify-2023.csv', 'r') as csv_file:
# Use Dictionary Reader to make info easier to parse(Thank you Corey Schafer on YouTube)
    csv_reader = csv.DictReader(csv_file)
# Set a count to zero to track T-Swift occurrences
    count = 0
# Loop over rows in dictionary object and update counter
    for row in csv_reader:
        if "Taylor Swift" in row['artist(s)_name']:
            count += 1
    print(f"Taylor Swift occurrences:",count)
# End Requirement step 3


# Requirement step 4 - looking at the track_name, and artist(s)_name columns, print out the most danceable
# track name and artist - there is only one.
with open('spotify-2023.csv', 'r') as csv_file:
# Create a list of dictionaries to iterate over once
    csv_reader = list(csv.DictReader(csv_file))
# Find highest value in danceability
    most_danceable = max(int(row['danceability_%']) for row in csv_reader)
# Check if value in current row is equal to highest value in CSV file
    for row in csv_reader:
        if int(row['danceability_%']) == most_danceable:
            print(f"Most danceable track name and artist:", row['track_name'],",",row['artist(s)_name'])
# End Requirement step 4


# Requirement step 5 - use the columns in_spotify_charts, in_apple_charts, in_deezer_charts, in_shazam_charts,
# output the chart leaders in a nice tabulated table (pretty table) with the headings {Track / Artist /
# Spotify Favorite / Apple Favorite / Deezer Favorite / Shazam Favorite }.  Put the value found from the charts
# column for each artist/track in the column that they are the leader. So, you will have only one (unless it's
# the same artist / track filled in for each chart.)

with open('spotify-2023.csv', 'r') as csv_file:
# Create a list of dictionaries to iterate over once
    csv_reader = list(csv.DictReader(csv_file))

# Function to handle null values in a column
    def validate_int(value):
        try:
            return int(value)
        except (ValueError, TypeError):
                return 0

# Replace commas with spaces in "in_shazam_charts" column to avoid value errors
    for row in csv_reader:
        row['in_shazam_charts'] = row['in_shazam_charts'].replace(',', '')

# Find highest value in chart columns
    spotify_charts_leader = max(validate_int(row['in_spotify_charts']) for row in csv_reader)
    apple_charts_leader = max(validate_int(row['in_apple_charts']) for row in csv_reader)
    deezer_charts_leader = max(validate_int(row['in_deezer_charts']) for row in csv_reader)
    shazam_charts_leader = max(validate_int(row['in_shazam_charts']) for row in csv_reader)

# Create a list to store chart leaders
    chart_leaders = []

# Iterate over list of dictionaries to add the chart leader
# I used print statements to check output before table setup
    for row in csv_reader:
        if validate_int(row['in_spotify_charts']) == spotify_charts_leader:
            #print(f"spotify leader:", row['track_name'],",",row['artist(s)_name'])
            chart_leaders.append((row['track_name'], row['artist(s)_name'], 'Spotify Leader', spotify_charts_leader))
        if validate_int(row['in_apple_charts']) == apple_charts_leader:
            #print(f"apple leader:", row['track_name'], ",", row['artist(s)_name'])
            chart_leaders.append((row['track_name'], row['artist(s)_name'], 'Apple Leader', apple_charts_leader))
        if validate_int(row['in_deezer_charts']) == deezer_charts_leader:
            #print(f'deezer leader:', row['track_name'], ",", row['artist(s)_name'])
            chart_leaders.append((row['track_name'], row['artist(s)_name'], 'Deezer Leader', deezer_charts_leader))
        if validate_int(row['in_shazam_charts']) == shazam_charts_leader:
            #print(f'shazam leader:', row['track_name'], ",", row['artist(s)_name'])
            chart_leaders.append((row['track_name'], row['artist(s)_name'], 'Shazam Leader',shazam_charts_leader))

# Create table headers and add data to table
headers = ["Track", "Artist", "Favorite Chart", "Max Value"]
print(tabulate(chart_leaders, headers=headers, tablefmt="pretty"))
# End Requirement step 5

# Close the csv file
csv_file.close()